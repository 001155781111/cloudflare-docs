---
import type { GetStaticPaths } from "astro";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
import { getCollection } from "astro:content";
import { Code } from "~/components";
import { InlineBadge } from "~/components";
import Schemas from "~/components/models/Schemas.astro";
import Playground from "~/components/models/Playground.astro";
import ModelInfo from "~/components/models/ModelInfo";
import ModelBadges from "~/components/models/ModelBadges";
import { LinkButton } from "~/components";
import ModelCodeExamples from "~/components/models/ModelCodeExamples";
import TextGenerationResponses from "~/components/models/responses/TextGenerationResponses.astro";
import TextGenerationCode from "~/components/models/code/TextGenerationCode.astro";
import TextGenerationPrompting from "~/components/models/prompting/TextGenerationPrompting.astro";
import AutomaticSpeechRecognitionResponses from "~/components/models/responses/AutomaticSpeechRecognitionResponses.astro";
import AutomaticSpeechRecognitionCode from "~/components/models/code/AutomaticSpeechRecognitionCode.astro";
import ImageClassificationResponses from "~/components/models/responses/ImageClassificationResponses.astro";
import ImageClassificationCode from "~/components/models/code/ImageClassificationCode.astro";
import ImageToTextResponses from "~/components/models/responses/ImageToTextResponses.astro";
import ImageToTextCode from "~/components/models/code/ImageToTextCode.astro";
import ObjectDetectionResponses from "~/components/models/responses/ObjectDetectionResponses.astro";
import ObjectDetectionCode from "~/components/models/code/ObjectDetectionCode.astro";
import SummarizationResponses from "~/components/models/responses/SummarizationResponses.astro";
import SummarizationCode from "~/components/models/code/SummarizationCode.astro";
import TextClassificationResponses from "~/components/models/responses/TextClassificationResponses.astro";
import TextClassificationCode from "~/components/models/code/TextClassificationCode.astro";
import TextEmbeddingsResponses from "~/components/models/responses/TextEmbeddingsResponses.astro";
import TextEmbeddingCode from "~/components/models/code/TextEmbeddingCode.astro";
import TextToImageResponses from "~/components/models/responses/TextToImageResponses.astro";
import TextToImageCode from "~/components/models/code/TextToImageCode.astro";
import TranslationResponses from "~/components/models/responses/TranslationResponses.astro";
import TranslationCode from "~/components/models/code/TranslationCode.astro";
import StableDiffusionV15Img2ImgCode from "~/components/models/code/StableDiffusion-v1-5-img2imgCode.astro";
import StableDiffusionV15InpaintingCode from "~/components/models/code/StableDiffusion-v1-5-inpaintingCode.astro";

import SchemaViewer from "~/components/models/SchemaViewer.astro";
import ModelPlayground from "~/components/models/ModelPlayground.jsx";
import { authorData } from "~/components/models/data";
import { Tabs, TabItem } from "~/components";

export const getStaticPaths = (async () => {
	const models = await getCollection("workers-ai-models");

	return models.map((entry) => {
		return {
			params: {
				name: entry.data.name.split("/")[2],
			},
			props: { model: entry.data },
		};
	});
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { model } = Astro.props;

const description = model.description;
const terms = model.properties.find((x) => x.property_id === "terms");
const showPlayground = model.task.name === "Text Generation";
const hasLora = Boolean(model.properties.find((x) => x.property_id === "lora"));

const isBeta = model.properties.find(
	({ property_id, value }) => property_id === "beta" && value === "true",
);

const hasPlayground = model.task.name === "Text Generation";

const author = authorData[model.name.split("/")[1]];
---

<StarlightPage
	frontmatter={{
		title: name,
		description,
	}}
	headings={[
		hasPlayground && { depth: 2, slug: "Playground", text: "Playground" },
		{ depth: 2, slug: "Usage", text: "Usage" },
		{ depth: 2, slug: "Parameters", text: "Parameters" },
		{ depth: 2, slug: "API Schemas", text: "API Schemas" },
	].filter((v) => Boolean(v))}
	hideTitle
>
	<div class="flex align-center">
		{
			author ? (
				<img class="mr-4 w-12 h-12 block" src={author.logo} />
			) : (
				<div class="w-12 h-12 mr-4 rounded-md bg-gray-100 text-gray-400 uppercase text-2xl font-black flex justify-center items-center">
					{model.name.split("/")[1].substr(0, 1)}
				</div>
			)
		}
		<div>
			<h1
				id="_top"
				class="!-mt-4 !mb-0 !leading-none !text-4xl !font-bold flex items-center"
			>
				{name}
				{
					isBeta && (
						<span class="ml-3 font-normal mt-2 bg-orange-200 text-orange-900 rounded-full px-2 py-0.5 text-xs">
							Beta
						</span>
					)
				}
			</h1>
			<span class="block -mt-1"><ModelInfo model={model} /></span>
		</div>
	</div>

	<span class="font-mono text-gray-400 text-sm mt-4 block">{model.name}</span>

	<p class="mt-3 !mb-2">{description}</p>
	{terms && <a href={terms.value}>Terms and License</a>}
	<ModelBadges model={model} />

	{
		hasPlayground && (
			<>
				<h2 id="Playground">Playground</h2>
				<p>
					Try out this model with Workers AI LLM Playground. It does not require
					any setup or authentication and an instant way to preview and test a
					model directly in the browser.
				</p>
				<LinkButton
					href={`https://playground.ai.cloudflare.com/?model=${model.name}`}
				>
					Launch the LLM Playground
				</LinkButton>
			</>
		)
	}

	<h2 id="Usage">Usage</h2>
	<Tabs>
		<TabItem label="Workers">
			<Code
				lang="js"
				code={`export default {
  async fetch(request, env) {
    const response = await env.AI.run("${model.name}", {
      prompt: "tell me a story",
    });
    return Response.json(response);
  }
}`}
			/>
		</TabItem>
		<TabItem label="HTTP">
			<Code
				lang="sh"
				code={`curl https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/ai/run/${model.name}
-X POST
-H "Authorization: Bearer $CLOUDFLARE_AUTH_TOKEN"
-d '{ "prompt": "tell me a story" }'`}
			/>
		</TabItem>
	</Tabs>

	<h2 id="Parameters">Parameters</h2>
	<SchemaViewer schema={model.schema.input} />

	<h2 id="API Schemas">API Schemas</h2>
	<p>The following schemas are based on JSON Schema</p>
	<div class="flex gap-2">
		<div
			class="w-1/2 overflow-auto !bg-gray-100 p-2 rounded-sm border !border-gray-200"
		>
			<div class="!m-0">
				<span
					class="text-sm bg-gray-200 px-2 py-1 border border-gray-300 rounded-md"
					>input</span
				>
			</div>
			<pre
				class="!p-0 !border-0">{JSON.stringify(model.schema.input, null, 4)}</pre>
		</div>
		<div
			class="w-1/2 overflow-auto !bg-gray-100 p-2 rounded-sm border !border-gray-200 !mt-0"
		>
			<div class="!m-0">
				<span
					class="text-sm bg-gray-200 px-2 py-1 border border-gray-300 rounded-md"
					>output</span
				>
			</div>
			<pre
				class="!p-0 !border-0">{JSON.stringify(model.schema.output, null, 4)}</pre>
		</div>
	</div>
</StarlightPage>
